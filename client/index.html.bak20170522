<!DOCTYPE html>
<html>
    <head>
        
        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

        <!-- Optional theme -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

        <script
        src="https://code.jquery.com/jquery-3.2.1.min.js"
        integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
        crossorigin="anonymous"></script>

        <!-- Latest compiled and minified JavaScript -->
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

        <script src="/socket.io/socket.io.js"></script>        

        <style>
            body{
                font-family: sans-serif;
            }
        
        </style>

    </head>

    <body>

        <div class="container">

            <h1>Welcome to Sharizan HTML5</h1>

            <div id="signDiv" class="row col-md-8">
                Username: <input id="signDiv-username" type="text"/><br/>
                Password: <input id="signDiv-password" type="password"/><br/>
                <button id="signDiv-signIn">Sign In</button>
                <button id="signDiv-signUp">Sign Up</button>
            </div>


            <div class="row" id="gameDiv" style="display:none">

                <div class="row col-md-8">
                    <!-- GAME CANVAS -->
                    <canvas id="ctx" width="500" height="500" style="border:1px solid #000"></canvas>
                </div>

                <div class="row col-md-8" id="chat-text" style="width:500px; height:100px;overflow-y:scroll; border: 1px solid #000">
                    <div>Hello!</div>
                </div>

                <div class="row col-md-8">
                    <form id="chat-form">
                        <input id="chat-input" type="text" style="width:500px;"/>
                    </form>
                    
                </div>

            </div>

        </div>     


        <script>
            var socket = io();  //init socket.io connection

            var random = Math.random();

            //sign 
            var signDiv = document.getElementById("signDiv");
            var signDivUsername = document.getElementById("signDiv-username");
            var signDivSignIn = document.getElementById("signDiv-signIn");
            var signDivSignUp = document.getElementById("signDiv-signUp");
            var signDivPassword = document.getElementById("signDiv-password");

            //Game
            var chatText = document.getElementById("chat-text");
            var chatInput = document.getElementById("chat-input");
            var chatForm = document.getElementById("chat-form");
            var ctx = document.getElementById("ctx").getContext("2d");
            var gameDiv = document.getElementById("gameDiv");

            signDivSignIn.onclick = function(){
                socket.emit('signIn', {username:signDivUsername.value, password:signDivPassword.value});
            }

            signDivSignUp.onclick = function(){
                socket.emit('signUp', {username:signDivUsername.value, password:signDivPassword.value});
            }

            socket.on('signInResponse', function(data){                
               
                if (data.success){
                    signDiv.style.display = 'none';
                    gameDiv.style.display = 'inline-block';
                } else {
                    alert('Sign-in failed!');
                }
            });

            socket.on('signUpResponse', function(data){                
               
                if (data.success){
                    alert('Sign-up successful!');
                } else {
                    alert('Sign-up failed!');
                }
            });
            
            ctx.font = '30px Arial';

            socket.on('addToChat', function(data){
                chatText.innerHTML += "<div>" + data + "</div>";
            });

            socket.on('evalAnswer', function(data){
                console.log(data);
            });

            chatForm.onsubmit = function(e){
                e.preventDefault();     //To avoid page refresh

                if (chatInput.value[0] === '/')
                    socket.emit('evalServer', chatInput.value.slice(1));
                else
                    socket.emit('sendMsgToServer', chatInput.value);
                chatInput.value = "";
            };


            //init package
            //When new stuff created, contains all the data
            var Player = function(initPack){
                
                var self = {};
                self.id = initPack.id;
                self.number = initPack.number;
                self.x = initPack.x;
                self.y = initPack.y;
                Player.list[self.id] = self;
                
                return self;
            };
            Player.list = {};

            var Bullet = function(initPack){
                
                var self = {};
                self.id = initPack.id;
                self.x = initPack.x;
                self.y = initPack.y;
                Bullet.list[self.id] = self;
                
                return self;
            };
            Bullet.list = {};

            socket.on('init', function(data){               
                //Player
                for (var i = 0; i < data.player.length; i++)   
                    new Player(data.player[i]);
                //Bullet
                for (var i = 0; i < data.bullet.length; i++)   
                    new Bullet(data.bullet[i]);
            });

            //update package
            socket.on('update', function(data){
                //Player
                for (var i = 0; i < data.player.length; i++)  {
                    var pack = data.player[i];
                    var p = Player.list[i];
                    if (p){
                        if (p.x !== undefined)
                            p.x = pack.x;
                        if (p.y !== undefined)
                            p.y = pack.y;
                    }
                } 
                    
                //Bullet
                for (var i = 0; i < data.bullet.length; i++)   {
                    var pack = data.bullet[i];
                    var b = Bullet.list[i];
                    if (b){
                        if (b.x !== undefined)
                            b.x = pack.x;
                        if (b.y !== undefined)
                            b.y = pack.y;
                    }
                }
                    

            });

            //remove package
            socket.on('remove', function(data){               
                //Player
                for (var i = 0; i < data.player.length; i++)   
                    delete Player.list[data.player[i]];
                //Bullet
                for (var i = 0; i < data.bullet.length; i++)   
                    delete Bullet.list[data.bullet[i]];
            });

            //Game loop
            setInterval(function(){

                ctx.clearRect(0, 0, 500, 500);
                
                //Player
                for (var i in Player.list)   
                    ctx.fillText(Player.list[i].number, Player.list[i].x, Player.list[i].y);
                //Bullet
                for (var i in Bullet.list)   
                    ctx.fillRect(Bullet.list[i].x-5, Bullet.list[i].y-5, 10, 10);

            }, 40);

            /*socket.on('newPositions', function(data){
                ctx.clearRect(0, 0, 500, 500);
                
                //Player
                for (var i = 0; i < data.player.length; i++)   
                    ctx.fillText(data.player[i].number, data.player[i].x, data.player[i].y);
                //Bullet
                for (var i = 0; i < data.bullet.length; i++)   
                    ctx.fillRect(data.bullet[i].x-5, data.bullet[i].y-5, 10, 10);
            });*/

            socket.on('serverMsg', function(data){
                console.log(data.msg);
            });

            document.onkeydown = function(event){
                if (event.keyCode === 68)   //d
                    socket.emit('keyPress', {inputId: 'right', state: true});
                else if (event.keyCode === 83)  //s
                    socket.emit('keyPress', {inputId: 'down', state: true});
                else if (event.keyCode === 65)  //a
                    socket.emit('keyPress', {inputId: 'left', state: true});
                else if (event.keyCode === 87)  //w
                    socket.emit('keyPress', {inputId: 'up', state: true});
            };

            document.onkeyup = function(event){
                if (event.keyCode === 68)   //d
                    socket.emit('keyPress', {inputId: 'right', state: false});
                else if (event.keyCode === 83)  //s
                    socket.emit('keyPress', {inputId: 'down', state: false});
                else if (event.keyCode === 65)  //a
                    socket.emit('keyPress', {inputId: 'left', state: false});
                else if (event.keyCode === 87)  //w
                    socket.emit('keyPress', {inputId: 'up', state: false});
            };

            document.onmousedown = function(event){
                socket.emit('keyPress', {inputId: 'attack', state:true});
            };

            document.onmouseup = function(event){
                socket.emit('keyPress', {inputId: 'attack', state:false});
            };

            //mouse angle
            document.onmousemove = function(event){
                var x = -250 + event.clientX - 8;
                var y = -250 + event.clientY - 8;
                var angle = Math.atan2(y, x) / Math.PI * 180;
                socket.emit('keyPress', {inputId: 'mouseAngle', state:angle});
            };

        </script>
        
    </body>

</html>
    
